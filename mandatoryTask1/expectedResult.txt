http://localhost:8888/notebooks/GitHub/MAC0417-Image-processing/ia898-master/master/tutorial_1_imagens.ipynb#Rotação-90-graus

# Programa para sobrepor quadriculado em imagem de cinza.

1. Definição da função a ser feita e testada automaticamente

Escrever um programa que dada uma imagem em níveis de cinza tipo uint8, sobreponha um quadriculado branco (valor 255) de lado definido. A função recebe dois parâmetros: f e delta. O primeiro parâmetro f é a imagem onde o quadriculado será sobreposto e delta é a distância entre as linhas, em coordenadas.

Esta função que você irá fazer deverá inicialmente ser testada por você mesmo e posteriormente ela será incluída no sistema de teste automático do Adessowiki. Você irá aprender a fazer isto nesta página.

Inicialmente, sua função deve ser feita utilizando o módulo Python, para isto quando especificar a linguagem na diretiva .. code::, deve se usar python module, desta forma sua função ficará visível para outras páginas do Adessowiki. A diferença fundamental de um trecho de script python de um python module é que neste último, há necessidade de importar explicitamente todas as funções de biblioteca. Neste curso usaremos a biblioteca numpy, algumas bibliotecas feitas no Adessowiki para suporte ao curso denominadas "ia636" e "ia870" e eventualmente outras que mencionaremos à medida que precisarmos.

A solução colocada abaixo não está pronta e portanto o resultado do teste automático será Falso. Voce deve editar a função colocando sua solução. A idéia é resolver o problema utilizando-se do fatiamento disponível no NumPy. Veja o exemplo em Fatiamentos em imagens. Note que para que o seu programa não altere a imagem f passada como parâmetro, é importante que sua função faça uma cópia profunda do array, como já sugerido no código.

2. Testando as funções

Esta parte é para você exercitar se a função feita acima está funcionando conforme o enunciado. É possível verificar qual é a saída esperada para cada parâmetro de entrada de modo que você pode saber se seu programa está ou não funcionando observando sua saída e comparando com a saída esperada. Note que agora estamos fazendo um script python, sem a necessidade do qualificador module. Entretanto, apesar da função ter sido definida nesta página, é necessário importar este módulo definido por esta página. Estamos importando com o nome my. Há necessidade de importar também o módulo que fará o teste e consolidação na página de resultados. Não há necessidade de editar este trecho.

Existem 2 casos para serem testados, um numérico e outro com imagem. A dinâmica agora consiste em você editar sua função qd e ficar testando se o seu resultado é correto observando as mensagens do trecho do programa a seguir:

Caso Numérico

Posso comparar visualmente e automaticamente se o resultado da minha função é o esperado:

Caso Imagem, passo impar

3. Colocando a função no sistema de testes do Adessowiki

Uma vez feita a função que você considera que está funcionando, descomente a linha tester.run_test(my.qd) para registrar seu programa no teste automático. Salvando esta página com esta linha descomentada, irá aparecer uma tabela com o desempenho da execução da sua função. Este seu resultado irá aparecer, juntamente com todos os resultados de seus colegas na página Resultados.


imagem de entrada=
[[ 0  1  2  3  4  5  6]
 [ 7  8  9 10 11 12 13]
 [14 15 16 17 18 19 20]
 [21 22 23 24 25 26 27]
 [28 29 30 31 32 33 34]
 [35 36 37 38 39 40 41]]
passo= 4
Resultado correto=
[[255 255 255 255 255 255 255]
 [255   8   9  10 255  12  13]
 [255  15  16  17 255  19  20]
 [255  22  23  24 255  26  27]
 [255 255 255 255 255 255 255]
 [255  36  37  38 255  40  41]]
Meu resultado=
[[255 255 255 255 255 255 255]
 [255   8   9  10 255  12  13]
 [255  15  16  17 255  19  20]
 [255  22  23  24 255  26  27]
 [255 255 255 255 255 255 255]
 [255  36  37  38 255  40  41]]
Meu resultado está correto? True
Minha função preserva a imagem de entrada: True





# 2. Programa de imagens de quadrados cinzas

1. Definição da função a ser feita e testada

Escrever um programa que gere uma imagem com quadrados cinzas. São dois quadrados maiores, concatenados horizontalmente de lado 300 pixels cada. O da esquerda é mais escuro que o da direita. Cada um destes quadrados possui no seu centro, um outro quadrado de lado 100 pixels. Existem 3 tons de cinza, para os quadrados maiores, o da esquerda tem o valor de 64 e o da direita, 192 e os quadrados menores têm tom igual de valor 128. Veja esta imagem no final desta página.

Esta imagem é utilizada para demonstrar nossa percepção relativa. Apesar dos dois quadrados pequenos terem o mesmo nível de cinza, o fato deles estarem circundados com níveis mais claro ou escuro nos dá a impressão que o quadrado que está circundado com nível mais escuro pareça mais claro que a realidade.

Em geral, uma imagem é composta de centena de milhares de pixels e é difícil verificar visualmente se existe algum erro nos programas desenvolvidos. Assim, é sempre recomendável testar os programas com imagens bem pequenas que possam ser visualizadas pela impressão da sua matriz de pixels. Assim, a função deve ter um único parâmetro: isImg. Se ele for verdadeiro, a função retorna a imagem acima com 300 linhas e 600 colunas, se for falso, a função retorna uma versão com um fator 50 vezes menor na altura e na largura, retornando uma imagem com 6 linhas e 12 colunas.

Esta função que você irá fazer deverá inicialmente ser testada por você mesmo e posteriormente ela será incluída no sistema de teste automático do Adessowiki. Você irá aprender a usá-lo agora.

Inicialmente, sua função deve ser feita utilizando o módulo Python, para isto quando especificar a linguagem na diretiva code, deve se usar "python module", desta forma sua função ficará visível para outras páginas do Adessowiki. A diferença fundamental de um trecho de script "python" de um "python module" é que neste último, há necessidade de importar explicitamente todas as funções de biblioteca. Neste curso usaremos a biblioteca "numpy", algumas bibliotecas feitas no Adessowiki para suporte ao curso denominadas "ia636" e "ia870" e eventualmente outras que mencionaremos à medida que precisarmos.

A solução colocada abaixo não está pronta e portanto o resultado do teste automático será Falso. Voce deve editar a função colocando sua solução.

2. Testando sua função

Esta parte é para você exercitar se a função feita acima está funcionando conforme o enunciado. É possível verificar qual é a saída esperada para cada parâmetro de entrada de modo que você pode saber se seu programa está ou não funcionando observando sua saída e comparando com a saída esperada. Note que agora estamos fazendo um script python, sem a necessidade do qualificador module. Entretanto, apesar da função ter sido definida nesta página, é necessário importar este módulo definido por esta página. Estamos importando com o nome my. Há necessidade de importar também o módulo que fará o teste e consolidação na página de resultados.

Para verificar se o programa feito está correto, é possível ver o par parâmetros de entrada e valor de saída esperados, para este primeiro teste que é feito com a imagem bem pequena:

Posso comparar visualmente e automaticamente se o resultado da minha função é o mesmo da saída esperada:

Finalmente, existe o segundo teste, onde a imagem é gerada:






[[  64.   64.   64.   64.   64.   64.  192.  192.  192.  192.  192.  192.]
 [  64.   64.   64.   64.   64.   64.  192.  192.  192.  192.  192.  192.]
 [  64.   64.  128.  128.   64.   64.  192.  192.  128.  128.  192.  192.]
 [  64.   64.  128.  128.   64.   64.  192.  192.  128.  128.  192.  192.]
 [  64.   64.   64.   64.   64.   64.  192.  192.  192.  192.  192.  192.]
 [  64.   64.   64.   64.   64.   64.  192.  192.  192.  192.  192.  192.]]
Meu resultado é igual ao gabarito?: True




# 3. Programa para rotacionar uma imagem de 90 graus no sentido horário

Escrever um programa que dada uma imagem em níveis de cinza, rotacione-a de 90 graus no sentido horário. A função recebe apenas um parâmetros: f, a imagem a ser rotacionada.

A solução colocada abaixo não está pronta e portanto o resultado do teste automático será Falso. Voce deve editar a função colocando sua solução. A idéia é resolver o problema utilizando-se do fatiamento disponível no Numpy. Veja o exemplo em Fatiamentos em imagens. Note que para que o seu programa não interfira na imagem passada como parâmetro, é importante que a função faça uma cópia profunda do array, como já sugerido no código, pois operações de fatiamento podem alterar a imagem original.




Qual é o valor de f após o comando f = np.zeros((100,200),dtype='uint8') ?

 f será uma lista com 100 listas onde cada uma das listas terá 200 elementos, todos do tipo uint8

 f será um ndarray com shape = (100,200) e com elementos do tipo uint8      ***

 f será um ndarray com 100 colunas e 200 linhas e com elementos do tipo uint8

 f será uma tupla com 200 tuplas onde cada uma das tuplas terá 100 elementos, todos do tipo uint8

 Nenhuma das anteriores

